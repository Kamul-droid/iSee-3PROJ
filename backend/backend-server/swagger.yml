openapi: 3.0.3
info:
  title: 3APIs Project
  description: |-
    Swagger documentation of the final 3APIs project
  version: 0.0.1
servers:
  - url: http://localhost:8080

paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Creates a new user
      requestBody:
        $ref: '#/components/requestBodies/UserRequest'  
      responses:
        '201':
          description: New user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'  
        '400':
          $ref: '#/components/responses/400BadRequest'
  /auth/login:
    post:
      tags:
        - auth
      summary: Logs in to an account
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2Mzk3MmRlYTM2YWZlY2MxODk5OWQ4OWMiLCJyb2xlIjoiVVNFUiIsImlhdCI6MTY3MDg1MjA5OSwiZXhwIjoxNjcwOTM4NDk5fQ.TKC5vgPDJO4slq9fJc7DP5iKpjbY4Ad8PW6KYZSxzXc
        '401':
          $ref: '#/components/responses/401BadPassword'
        '404':
          $ref: '#/components/responses/404NotFound'
  /users:
    get:
      security:
        - bearerAuth: []
      tags:
        - user
      summary: Gets all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserArray'
        '401':
          description: Unauthenticated
        '403':
          description: Insufficient role
  /users/{_id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - user
      summary: Gets a user by ID
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthenticated'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    patch:
      security:
        - bearerAuth: []
      tags:
        - user
      summary: Updates a user by ID
      requestBody:
        $ref: '#/components/requestBodies/UserRequest' 
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthenticated'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    delete:
      security:
        - bearerAuth: []
      tags:
        - user
      summary: Deletes a user by ID
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User deleted
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthenticated'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
          
          
          
  /trains:
    post:
      tags:
        - train
      summary: Creates a new train
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TrainRequest'  
      responses:
        '201':
          description: New train created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainResponse'  
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthenticated'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    get:
      tags:
        - train
      summary: Gets all trains
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: List of trains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainArray'

  /trains/{_id}:
    get:
      tags:
        - train
      summary: Gets a train by ID
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '200':
          description: Train data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
    patch:
      security:
        - bearerAuth: []
      tags:
        - train
      summary: Updates a train by ID
      requestBody:
        $ref: '#/components/requestBodies/TrainRequest' 
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '200':
          description: Train data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthenticated'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    delete:
      security:
        - bearerAuth: []
      tags:
        - train
      summary: Deletes a train by ID
      parameters:
        - $ref: '#/components/parameters/ObjectId'
        - in: query
          name: force
          schema:
            type: boolean
          required: false
          description: Forces cancellation of all associated tickets if set to true.
      responses:
        '200':
          description: Train deleted
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthenticated'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
                  
          
          
  /stations:
    post:
      tags:
        - station
      summary: Creates a new station
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/StationRequest'  
      responses:
        '201':
          description: New station created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationResponse'  
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthenticated'
        '403':
          $ref: '#/components/responses/403Forbidden'
    get:
      tags:
        - station
      summary: Gets all stations
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: List of stations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationArray'

  /stations/{_id}:
    get:
      tags:
        - station
      summary: Gets a station by ID
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '200':
          description: Station data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
    patch:
      security:
        - bearerAuth: []
      tags:
        - station
      summary: Updates a station by ID
      requestBody:
        $ref: '#/components/requestBodies/StationRequest' 
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '200':
          description: Station data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthenticated'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    delete:
      security:
        - bearerAuth: []
      tags:
        - station
      summary: Deletes a station by ID
      parameters:
        - $ref: '#/components/parameters/ObjectId'
        - in: query
          name: force
          schema:
            type: boolean
          required: false
          description: Forces deletion of all associated trains and cancellation of all associated tickets if set to true.

      responses:
        '200':
          description: Station deleted
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthenticated'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  /trains/{_id}/buy-ticket:
    post:
      tags:
        - ticket
      summary: Purchases a ticket for this train
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ObjectId'

      responses:
        '200':
          description: Ticket purchased
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '401':
          $ref: '#/components/responses/401Unauthenticated'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'


  /tickets/{_id}/validate:
    post:
      tags:
        - ticket
      summary: Validates the specified ticket
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ObjectId'

      responses:
        '200':
          description: The ticket that was validated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthenticated'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  /tickets/{_id}:
    get:
      tags:
        - ticket
      summary: Gets the specified ticket
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ObjectId'

      responses:
        '200':
          description: The ticket that was queried
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '401':
          $ref: '#/components/responses/401Unauthenticated'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  /users/{_id}/tickets:
    get:
      tags:
        - ticket
      summary: Gets all of a user's tickets
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'

      responses:
        '200':
          description: List of tickets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketArray'
        '401':
          $ref: '#/components/responses/401Unauthenticated'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    UserId:
      in: path
      name: _id
      schema:
        type: string
      required: true
      description: User ObjectID to carry the operation on. Use the value "me" in order to carry the operation on the currently logged-in user.
    ObjectId:
      in: path
      name: _id
      schema:
        type: string
      required: true
      description: Mongodb ObjectId.
    Page:
      name: page
      in: query
      description: Page number.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 1
    PageSize:
      name: pageSize
      in: query
      description: Size of a page.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 10
    Sort:
      name: sort
      in: query
      description: Parameters to sort by, accepts sorting by multiple parameters, use the name of the parameter to sort in ascending order, prefix the name with a "-" to sort in descending order. Ex. "param1 -param2 param3" 
      required: false
      schema:
        type: string
      
  schemas:
    UserDto:
      type: object
      properties:
        username:
          type: string
          example: testUser
        email:
          type: string
          example: testUser@test.com
        role:
          type: string
          enum: [USER, EMPLOYEE, ADMIN]
          example: USER
    UserResponse:
      allOf:
      - type: object
        properties:
          _id:
            type: string
            example: '000000000000000000000000'
      - $ref: '#/components/schemas/UserDto'
    UserArray:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'


    TrainDto:
      type: object
      properties:
        name:
          type: string
          example: testTrain
        startStation:
          type: string
          example: '000000000000000000000000'
        endStation:
          type: string
          example: '000000000000000000000000'
        timeOfDeparture:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00Z
    TrainResponse:
      allOf:
      - type: object
        properties:
          _id:
            type: string
            example: '000000000000000000000000'
      - $ref: '#/components/schemas/TrainDto'
    TrainArray:
      type: object
      properties:
        trains:
          type: array
          items:
            $ref: '#/components/schemas/TrainResponse'


    StationDto:
      type: object
      properties:
        name:
          type: string
          example: testStation
        openHour:
          type: string
          example: 00:00
        closeHour:
          type: string
          example: 23:59
    StationResponse:
      allOf:
      - type: object
        properties:
          _id:
            type: string
            example: '000000000000000000000000'
          image:
            type: string
            example: path/of/image/on/server
      - $ref: '#/components/schemas/StationDto'
    StationArray:
      type: object
      properties:
        trains:
          type: array
          items:
            $ref: '#/components/schemas/StationResponse'


    TicketResponse:
      type: object
      properties:
        _id:
          type: string
          example: '000000000000000000000000'
        userId:
          type: string
          example: '000000000000000000000000'
        trainId:
          type: string
          example: '000000000000000000000000'
        state:
          type: string
          enum: [PURCHASED, VALIDATED, CANCELLED]
          example: 'PURCHASED'
    TicketArray:
      type: object
      properties:
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/TicketResponse'

  requestBodies:
    UserRequest:
      description: User data
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/UserDto'
            - type: object
              properties:
                password:
                  type: string
                  format: password
                  example: 'lowerUPPER123@'
    LoginRequest:
      description: User login data
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: testUser@test.com
              password:
                type: string
                format: password
                example: 'lowerUPPER123@'


    TrainRequest:
      description: Train data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrainDto'


    StationRequest:
      description: Train data
      content:
        multipart/form-data:
          schema:
            allOf:
            - $ref: '#/components/schemas/StationDto'
            - type: object
              properties:
                image: 
                  type: string
                  format: binary
            
  responses:
    400BadRequest:
      description: Bad Request.
    401Unauthenticated:
      description: The user issuing the request is not authenticated, a valid JWT must be passed as a bearer token.
    401BadPassword:
      description: The user tried to authenticate with a bad password.
    403Forbidden:
      description: The user does not possess sufficient privileges to execute this action.
    404NotFound:
      description: Not Found.